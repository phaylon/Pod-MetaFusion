.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "t::TestModule 3"
.TH t::TestModule 3 "2009-11-15" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
TestModule \- 
Abstract Î» text
.SH "VERSION"
.IX Header "VERSION"
0.01
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    $foo\->bar(23);
.Ve
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.IP "\(bu" 2
TestModule
.RS 2
.IP "\(bu" 2
TestBase
.RS 2
.IP "\(bu" 2
Moose::Object
.RE
.RS 2
.RE
.RE
.RS 2
.RE
.SH "APPLIED ROLES"
.IX Header "APPLIED ROLES"
.IP "\(bu" 4
TestRole
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the description.
.SS "Foo"
.IX Subsection "Foo"
This is foo.
.SH "BAR"
.IX Header "BAR"
This is bar.
.SS "Baz"
.IX Subsection "Baz"
This is baz.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
Object constructor accepting the following parameters:
.IP "\(bu" 4
class (optional)
.Sp
Initial value for the inherited class attribute.
.IP "\(bu" 4
dict (\fBrequired\fR)
.Sp
Initial value for the dict attribute.
.IP "\(bu" 4
file (optional)
.Sp
Initial value for the inherited file attribute.
.IP "\(bu" 4
foo (optional)
.Sp
Initial value for the foo attribute.
.IP "\(bu" 4
myclass (optional)
.Sp
Initial value for the myclass attribute.
.PP
Additionally you can pass in \f(CW\*(C`fnord\*(C'\fR to reboot the internet.
.SS "classmethod"
.IX Subsection "classmethod"
.Vb 1
\&    \->classmethod(ClassName $x: $y)
.Ve
.IP "\(bu" 4
Positional Parameters:
.RS 4
.IP "\(bu" 4
\&\f(CW$y\fR
.RE
.RS 4
.RE
.SS "dict"
.IX Subsection "dict"
Reader for the dict attribute.
.SS "fnord"
.IX Subsection "fnord"
.Vb 1
\&    \->fnord(Int $x, Dict["foo",Int] $y)
.Ve
.IP "\(bu" 4
Positional Parameters:
.RS 4
.IP "\(bu" 4
Int \f(CW$x\fR
.Sp
the integer we return
.IP "\(bu" 4
Dict[foo,Int] \f(CW$y\fR
.Sp
the integer we discard
.RE
.RS 4
.RE
.PP
Additional method info.
.SS "foo"
.IX Subsection "foo"
Accessor for the foo attribute.
.SS "mixed"
.IX Subsection "mixed"
.Vb 1
\&    \->mixed(Int $n, Str :$y)
.Ve
.IP "\(bu" 4
Positional Parameters:
.RS 4
.IP "\(bu" 4
Int \f(CW$n\fR
.RE
.RS 4
.RE
.IP "\(bu" 4
Named Parameters:
.RS 4
.IP "\(bu" 4
Str \f(CW\*(C`:$y\*(C'\fR (optional)
.RE
.RS 4
.RE
.SS "myclass"
.IX Subsection "myclass"
Accessor for the myclass attribute.
.SS "named"
.IX Subsection "named"
.Vb 1
\&    \->named(Int :$x)
.Ve
.IP "\(bu" 4
Named Parameters:
.RS 4
.IP "\(bu" 4
Int \f(CW\*(C`:$x\*(C'\fR (optional)
.Sp
a named int
.RE
.RS 4
.RE
.SS "no_type"
.IX Subsection "no_type"
.Vb 1
\&    \->no_type($foo)
.Ve
.IP "\(bu" 4
Positional Parameters:
.RS 4
.IP "\(bu" 4
\&\f(CW$foo\fR
.RE
.RS 4
.RE
.SS "rest"
.IX Subsection "rest"
.Vb 1
\&    \->rest($n, @ns)
.Ve
.IP "\(bu" 4
Positional Parameters:
.RS 4
.IP "\(bu" 4
\&\f(CW$n\fR
.IP "\(bu" 4
\&\f(CW@ns\fR
.RE
.RS 4
.RE
.SS "with_a_very"
.IX Subsection "with_a_very"
.Vb 10
\&    \->with_a_very(
\&        Int :$looong!,
\&        ArrayRef[
\&            HashRef[
\&                ArrayRef[
\&                    Int
\&                ]
\&            ]
\&        ] :$signature
\&    )
.Ve
.IP "\(bu" 4
Named Parameters:
.RS 4
.IP "\(bu" 4
Int \f(CW\*(C`:$looong\*(C'\fR
.IP "\(bu" 4
ArrayRef[HashRef[ArrayRef[Int]]] \f(CW\*(C`:$signature\*(C'\fR (optional)
.RE
.RS 4
.RE
.SS "meta"
.IX Subsection "meta"
Returns the meta object for \f(CW\*(C`TestModule\*(C'\fR as an instance of Class::MOP::Class::Immutable::Moose::Meta::Class
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "dict (required)"
.IX Subsection "dict (required)"
.IP "\(bu" 4
Type Constraint
.Sp
Dict[foo,HashRef]
.IP "\(bu" 4
Constructor Argument
.Sp
dict
.IP "\(bu" 4
Associated Methods
.Sp
dict
.SS "foo (optional)"
.IX Subsection "foo (optional)"
this is a foo
.IP "\(bu" 4
Type Constraint
.Sp
Int
.IP "\(bu" 4
Constructor Argument
.Sp
foo
.IP "\(bu" 4
Associated Methods
.Sp
foo
.PP
Attribute description.
.SS "myclass (optional)"
.IX Subsection "myclass (optional)"
.IP "\(bu" 4
Type Constraint
.Sp
TestModule
.IP "\(bu" 4
Constructor Argument
.Sp
myclass
.IP "\(bu" 4
Associated Methods
.Sp
myclass
.SH "ASSUMED VERSIONS"
.IX Header "ASSUMED VERSIONS"
This document has been rendered against the following prerequisites:
.IP "\(bu" 4
Moose
.Sp
Version 0.92
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
MooseX::Declare
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
See OtherModule for information about license and copyright.
